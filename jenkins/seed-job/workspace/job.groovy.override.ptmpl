// Configure jobs

class ProjectDefinition {
    final String group
    final String project
    String branches = 'master feature-* release-* bugfix-* support-*'

    ProjectDefinition(String group, String project) {
        this.group = group
        this.project = project
    }

    ProjectDefinition branches(String branches) {
        this.branches = branches
        return this
    }
}

def projectDefinitions = [
{{range $appName, $app := .Project.Applications}}
    new ProjectDefinition('yantrashala', {{$app.Name}}).branches('master'), 
{{end}}
]

projectDefinitions.each { projectDefinition ->
    def repositoryUrl = 'git@github.com:' + projectDefinition.group + '/' + projectDefinition.project + '.git'
    pipelineJob(projectDefinition.project) {
        displayName( projectDefinition.project + ' Pipeline')
        definition {
            cps {
                script('''
        pipeline {
            agent {
                docker { image 'node:7-alpine' }
            }
            stages {
                stage('Test') {
                    steps {
                        sh 'node --version'
                    }
                }
            }
        }
        ''')
            }
        }
    }
}

// Configure views

listView('All (recurse in subfolders)') {
    jobs {
        regex(/.+/)
    }
    recurse()
    columns {
        status()
        weather()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
}

listView('Masters') {
    jobs {
        regex(/.*\/master/)
    }
    recurse()
    columns {
        status()
        weather()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
}